name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  BUN_VERSION: 1.0.0

jobs:
  lint-and-type-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Type check
        run: bun run type-check

      - name: Lint
        run: bun run lint

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v3

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run migrations
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
        run: psql $DATABASE_URL -f migrations/001_initial.sql

      - name: Run tests
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
        run: bun test --coverage

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info

  build:
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test]
    steps:
      - uses: actions/checkout@v3

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build
        run: bun run build

      - name: Build Docker image
        run: docker build -t analytics-api:${{ github.sha }} .

      - name: Save Docker image
        run: docker save analytics-api:${{ github.sha }} > analytics-api.tar

      - name: Upload Docker image
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: analytics-api.tar

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: docker-image

      - name: Load Docker image
        run: docker load < analytics-api.tar

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: analytics-api:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

  deploy:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: docker-image

      - name: Load Docker image
        run: docker load < analytics-api.tar

      - name: Push to registry
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker tag analytics-api:${{ github.sha }} ${{ secrets.DOCKER_REGISTRY }}/analytics-api:latest
          docker tag analytics-api:${{ github.sha }} ${{ secrets.DOCKER_REGISTRY }}/analytics-api:${{ github.sha }}
          docker push ${{ secrets.DOCKER_REGISTRY }}/analytics-api:latest
          docker push ${{ secrets.DOCKER_REGISTRY }}/analytics-api:${{ github.sha }}

      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Add your deployment commands here (kubectl, AWS ECS, etc.)
